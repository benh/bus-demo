[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/package.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/package.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/package.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.stream[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage object stream {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  import scala.language.{ implicitConversions, postfixOps }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  type Closeable = { def close(): Unit }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  def withResource[A <: Closeable, B](a: A)(f: A => B): B =[0m
[0m[[0mdebug[0m] [0m    try f(a) finally a.close()[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/package.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/ServiceConfig.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/ServiceConfig.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/ServiceConfig.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.stream[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport com.typesafe.config.ConfigFactory[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mobject ServiceConfig {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  val config = ConfigFactory.load();[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  val cassandraNodeName = config.getString("cassandra.connect").split(":").head[0m
[0m[[0mdebug[0m] [0m  val cassandraNodePort = config.getString("cassandra.connect").split(":").reverse.head[0m
[0m[[0mdebug[0m] [0m  val kafkaConnect = config.getString("kafka.connect")[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/ServiceConfig.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/StreamToKafkaApp.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/StreamToKafkaApp.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/StreamToKafkaApp.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.stream[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport akka.actor.ActorSystem[0m
[0m[[0mdebug[0m] [0mimport akka.event.Logging[0m
[0m[[0mdebug[0m] [0mimport akka.http.scaladsl.Http[0m
[0m[[0mdebug[0m] [0mimport akka.http.scaladsl.model.{HttpRequest, HttpResponse, StatusCode, Uri}[0m
[0m[[0mdebug[0m] [0mimport akka.http.scaladsl.unmarshalling.Unmarshal[0m
[0m[[0mdebug[0m] [0mimport akka.stream.ActorMaterializer[0m
[0m[[0mdebug[0m] [0mimport akka.stream.scaladsl.{Flow, Sink, Source}[0m
[0m[[0mdebug[0m] [0mimport com.datastax.driver.core.{Cluster, PreparedStatement, Session}[0m
[0m[[0mdebug[0m] [0mimport de.heikoseeberger.akkahttpjson4s.Json4sSupport[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport scala.concurrent.Future[0m
[0m[[0mdebug[0m] [0mimport scala.util.{Failure, Success}[0m
[0m[[0mdebug[0m] [0mimport org.json4s.{DefaultFormats, Formats, Serialization, jackson}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport concurrent.duration._[0m
[0m[[0mdebug[0m] [0mimport akka.kafka.ProducerSettings[0m
[0m[[0mdebug[0m] [0mimport org.reactivestreams.Subscriber[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport scala.concurrent.Promise[0m
[0m[[0mdebug[0m] [0mimport akka.kafka.scaladsl.{Producer, _}[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.{RouteInfos, Routes, Vehicle}[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.serializer.VehicleFstSerializer[0m
[0m[[0mdebug[0m] [0mimport org.apache.kafka.clients.producer.ProducerRecord[0m
[0m[[0mdebug[0m] [0mimport org.apache.kafka.common.serialization.{ByteArraySerializer, StringSerializer}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mobject StreamToKafkaApp {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  import ServiceConfig._[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  implicit val system = ActorSystem("stream-system")[0m
[0m[[0mdebug[0m] [0m  implicit val actorMaterializer = ActorMaterializer()[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  val cluster: Cluster = Cluster.builder().addContactPoint(cassandraNodeName).withPort(Integer.parseInt(cassandraNodePort)).build()[0m
[0m[[0mdebug[0m] [0m  val cassandraSession: Session = cluster.connect()[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  val routeStatement: PreparedStatement = cassandraSession.prepare("INSERT INTO streaming.routes(id, order_id, route_id, longitude, latitude, display_name) VALUES(?, ?, ?, ?, ?, ?);")[0m
[0m[[0mdebug[0m] [0m  val vehiclesStatement: PreparedStatement = cassandraSession.prepare("INSERT INTO streaming.vehicles(id, time, longitude, latitude, heading, route_id, run_id, seconds_since_report) VALUES(?, ?, ?, ?, ?, ?, ?, ?);")[0m
[0m[[0mdebug[0m] [0m  val routeInfoStatement: PreparedStatement = cassandraSession.prepare("INSERT INTO streaming.routeInfos(id, display_name) VALUES(?,?);")[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  //Kafka stuff[0m
[0m[[0mdebug[0m] [0m  val producerSettings = ProducerSettings(system, new ByteArraySerializer, new VehicleFstSerializer)[0m
[0m[[0mdebug[0m] [0m    .withBootstrapServers(kafkaConnect)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  def main(args: Array[String]): Unit = {[0m
[0m[[0mdebug[0m] [0m    val httpClient: Flow[HttpRequest, HttpResponse, Future[Http.OutgoingConnection]] = Http(system).outgoingConnection("api.metro.net")[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    val streamToKafka = new StreamToKafkaApp(system, httpClient)[0m
[0m[[0mdebug[0m] [0m    streamToKafka.run()[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mclass StreamToKafkaApp(system: ActorSystem, httpClient: Flow[HttpRequest, HttpResponse, Future[Http.OutgoingConnection]]) {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  import org.json4s._[0m
[0m[[0mdebug[0m] [0m  import org.json4s.jackson.JsonMethods._[0m
[0m[[0mdebug[0m] [0m  import Json4sSupport._[0m
[0m[[0mdebug[0m] [0m  import StreamToKafkaApp._[0m
[0m[[0mdebug[0m] [0m  import StreamToKafkaApp.actorMaterializer[0m
[0m[[0mdebug[0m] [0m  import scala.concurrent.ExecutionContext.Implicits.global[0m
[0m[[0mdebug[0m] [0m  import concurrent.duration._[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  implicit val serialization = jackson.Serialization[0m
[0m[[0mdebug[0m] [0m  implicit val formats = DefaultFormats[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  private val log = Logging(system, getClass.getName)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  private val producer = Producer.plainSink(producerSettings)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  def run(): Unit = {[0m
[0m[[0mdebug[0m] [0m    log.info("starting StreamToKafkaApp")[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    consume()[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  private def consume(): Unit = {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    log.debug("Consuming routes")[0m
[0m[[0mdebug[0m] [0m    val materializer = Source.single(HttpRequest(uri = Uri("/agencies/lametro/routes/"))).via(httpClient).runWith(Sink.head)[0m
[0m[[0mdebug[0m] [0m    val future = materializer.map { x =>[0m
[0m[[0mdebug[0m] [0m      x.status match {[0m
[0m[[0mdebug[0m] [0m        case status:StatusCode if status.isSuccess() => { log.info("success"); Some(x.entity) }[0m
[0m[[0mdebug[0m] [0m        case status:StatusCode if status.isFailure() => { None }[0m
[0m[[0mdebug[0m] [0m      }[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    future.onSuccess {[0m
[0m[[0mdebug[0m] [0m      case Some(entity) => {[0m
[0m[[0mdebug[0m] [0m        log.debug(entity.toString)[0m
[0m[[0mdebug[0m] [0m        val routeInfos = Unmarshal(entity).to[RouteInfos].onComplete {[0m
[0m[[0mdebug[0m] [0m          case Success(routeInfos) => {[0m
[0m[[0mdebug[0m] [0m            log.debug(routeInfos.toString)[0m
[0m[[0mdebug[0m] [0m            routeInfos.items.foreach { routeInfo =>[0m
[0m[[0mdebug[0m] [0m              {[0m
[0m[[0mdebug[0m] [0m                log.debug(routeInfo.toString)[0m
[0m[[0mdebug[0m] [0m                cassandraSession.executeAsync(routeInfoStatement.bind(routeInfo.id, routeInfo.display_name))[0m
[0m[[0mdebug[0m] [0m                extractRoutes(routeInfo.id)[0m
[0m[[0mdebug[0m] [0m                log.info("adding new actor route for routeInfo:" + routeInfo)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m                //                Source.actorPublisher(VehiclesActor.props(routeInfo, httpClient)).map(elem => {[0m
[0m[[0mdebug[0m] [0m                //                    log.info(s"publishing element: ${elem}")[0m
[0m[[0mdebug[0m] [0m                //                    new ProducerRecord[Array[Byte], Vehicle]("vehicles", elem)[0m
[0m[[0mdebug[0m] [0m                //                }).to(producer).run()[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m                Flow[Vehicle].map(elem => {[0m
[0m[[0mdebug[0m] [0m                  log.info(s"publishing element: ${elem}")[0m
[0m[[0mdebug[0m] [0m                  new ProducerRecord[Array[Byte], Vehicle]("METRO-Vehicles", elem)[0m
[0m[[0mdebug[0m] [0m                }).to(producer).runWith(Source.actorPublisher(VehiclesActor.props(routeInfo, httpClient)))[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m              }[0m
[0m[[0mdebug[0m] [0m            }[0m
[0m[[0mdebug[0m] [0m          }[0m
[0m[[0mdebug[0m] [0m          case Failure(ex) => log.error(ex, ex.getMessage)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m        }[0m
[0m[[0mdebug[0m] [0m      }[0m
[0m[[0mdebug[0m] [0m      case None => {[0m
[0m[[0mdebug[0m] [0m        log.debug("geh doch weinen")[0m
[0m[[0mdebug[0m] [0m      }[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  def extractRoutes(routeId: String): Unit = {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    val materializer = Source.single(HttpRequest(uri = Uri(s"/agencies/lametro/routes/$routeId/sequence/"))).via(httpClient).runWith(Sink.head)[0m
[0m[[0mdebug[0m] [0m    val future = materializer.map { x =>[0m
[0m[[0mdebug[0m] [0m      x.status match {[0m
[0m[[0mdebug[0m] [0m        case status:StatusCode if status.isSuccess() => { Some(x.entity) }[0m
[0m[[0mdebug[0m] [0m        case status:StatusCode if status.isFailure() => { None }[0m
[0m[[0mdebug[0m] [0m      }[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    future.onSuccess {[0m
[0m[[0mdebug[0m] [0m      case Some(entity) => {[0m
[0m[[0mdebug[0m] [0m        log.debug(entity.toString)[0m
[0m[[0mdebug[0m] [0m        val routes = Unmarshal(entity).to[Routes].onComplete {[0m
[0m[[0mdebug[0m] [0m          case Success(routes) => {[0m
[0m[[0mdebug[0m] [0m            log.debug(routes.toString)[0m
[0m[[0mdebug[0m] [0m            routes.items.zipWithIndex.foreach {[0m
[0m[[0mdebug[0m] [0m              case (route, index) =>[0m
[0m[[0mdebug[0m] [0m                {[0m
[0m[[0mdebug[0m] [0m                  log.debug(route.toString)[0m
[0m[[0mdebug[0m] [0m                  cassandraSession.executeAsync(routeStatement.bind(route.id, index.asInstanceOf[Object], routeId, route.longitude.asInstanceOf[Object], route.latitude.asInstanceOf[Object], route.display_name))[0m
[0m[[0mdebug[0m] [0m                }[0m
[0m[[0mdebug[0m] [0m            }[0m
[0m[[0mdebug[0m] [0m          }[0m
[0m[[0mdebug[0m] [0m          case Failure(ex) => log.error(ex, ex.getMessage)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m        }[0m
[0m[[0mdebug[0m] [0m      }[0m
[0m[[0mdebug[0m] [0m      case None => { log.debug("geh doch weinen") }[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/StreamToKafkaApp.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/VehiclesActor.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/VehiclesActor.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/VehiclesActor.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.stream[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.util.Date[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport akka.actor.Props[0m
[0m[[0mdebug[0m] [0mimport akka.event.Logging[0m
[0m[[0mdebug[0m] [0mimport akka.http.scaladsl.Http[0m
[0m[[0mdebug[0m] [0mimport akka.http.scaladsl.model.{ HttpRequest, HttpResponse, Uri }[0m
[0m[[0mdebug[0m] [0mimport akka.http.scaladsl.unmarshalling.Unmarshal[0m
[0m[[0mdebug[0m] [0mimport akka.stream.ActorMaterializer[0m
[0m[[0mdebug[0m] [0mimport akka.stream.actor.ActorPublisher[0m
[0m[[0mdebug[0m] [0mimport akka.stream.scaladsl.{ Flow, Sink, Source }[0m
[0m[[0mdebug[0m] [0mimport de.heikoseeberger.akkahttpjson4s.Json4sSupport[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.{ RouteInfo, Vehicle, Vehicles }[0m
[0m[[0mdebug[0m] [0mimport org.joda.time.DateTime[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport scala.concurrent.Future[0m
[0m[[0mdebug[0m] [0mimport scala.util.{ Failure, Success }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mobject VehiclesActor {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  case class Tick()[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  def props(routeInfo: RouteInfo, httpClient: Flow[HttpRequest, HttpResponse, Future[Http.OutgoingConnection]]): Props = Props(new VehiclesActor(routeInfo, httpClient))[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mclass VehiclesActor(routeInfo: RouteInfo, httpClient: Flow[HttpRequest, HttpResponse, Future[Http.OutgoingConnection]]) extends ActorPublisher[Vehicle] {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  import VehiclesActor._[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  import org.json4s._[0m
[0m[[0mdebug[0m] [0m  import org.json4s.jackson.JsonMethods._[0m
[0m[[0mdebug[0m] [0m  import Json4sSupport._[0m
[0m[[0mdebug[0m] [0m  import concurrent.duration._[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  implicit val executionContext = context.dispatcher[0m
[0m[[0mdebug[0m] [0m  implicit val actorMaterializer = ActorMaterializer()[0m
[0m[[0mdebug[0m] [0m  implicit val serialization = jackson.Serialization[0m
[0m[[0mdebug[0m] [0m  implicit val formats = DefaultFormats[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  private val log = Logging(context.system, getClass.getName)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  log.info(s"VehiclesActor for routeID ${routeInfo.id} created")[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  var buffer = Vector.empty[Vehicle][0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  val tick = context.system.scheduler.schedule(0 seconds, 30 seconds, self, Tick())[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def receive: Receive = {[0m
[0m[[0mdebug[0m] [0m    case Tick() => {[0m
[0m[[0mdebug[0m] [0m      log.info(s"extracting vehicles Infor for routeID: ${routeInfo.id}")[0m
[0m[[0mdebug[0m] [0m      extractVehicles(routeInfo.id)[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def postStop():Unit = tick.cancel()[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  //noinspection ScalaStyle[0m
[0m[[0mdebug[0m] [0m  def extractVehicles(routeId: String) = {[0m
[0m[[0mdebug[0m] [0m    val materializerVehicles = Source.single(HttpRequest(uri = Uri(s"/agencies/lametro/routes/$routeId/vehicles/"))).via(httpClient).runWith(Sink.head)[0m
[0m[[0mdebug[0m] [0m    val vehiclesFuture = materializerVehicles.map { x =>[0m
[0m[[0mdebug[0m] [0m      x.status match {[0m
[0m[[0mdebug[0m] [0m        case status if status.isSuccess() => { Some(x.entity) }[0m
[0m[[0mdebug[0m] [0m        case status if status.isFailure() => { None }[0m
[0m[[0mdebug[0m] [0m      }[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m    vehiclesFuture.onSuccess {[0m
[0m[[0mdebug[0m] [0m      case Some(entity) => {[0m
[0m[[0mdebug[0m] [0m        log.debug("got vehicle entities")[0m
[0m[[0mdebug[0m] [0m        val vehicles = Unmarshal(entity).to[Vehicles].onComplete {[0m
[0m[[0mdebug[0m] [0m          case Success(vehicles) => {[0m
[0m[[0mdebug[0m] [0m            val currTime = DateTime.now[0m
[0m[[0mdebug[0m] [0m            log.debug(vehicles.toString)[0m
[0m[[0mdebug[0m] [0m            vehicles.items.foreach {[0m
[0m[[0mdebug[0m] [0m              vehicle =>[0m
[0m[[0mdebug[0m] [0m                {[0m
[0m[[0mdebug[0m] [0m                  log.debug(vehicle.toString)[0m
[0m[[0mdebug[0m] [0m                  log.debug("sending vehicle to stream sink")[0m
[0m[[0mdebug[0m] [0m                  val vehicleToPersist = Vehicle(vehicle.id, Some(currTime.minusSeconds(vehicle.seconds_since_report).withMillisOfSecond(0).toDate), vehicle.latitude, vehicle.longitude, vehicle.heading, Some(routeInfo.id), vehicle.run_id, vehicle.seconds_since_report)[0m
[0m[[0mdebug[0m] [0m                  log.debug(s"sending Vehicle ${vehicleToPersist}")[0m
[0m[[0mdebug[0m] [0m                  if (buffer.isEmpty && totalDemand > 0) {[0m
[0m[[0mdebug[0m] [0m                    log.info(s"Buffer Empty sending vehicle: ${vehicleToPersist}")[0m
[0m[[0mdebug[0m] [0m                    onNext(vehicleToPersist)[0m
[0m[[0mdebug[0m] [0m                  } else {[0m
[0m[[0mdebug[0m] [0m                    log.info(s"Buffering vehicle: ${vehicleToPersist}")[0m
[0m[[0mdebug[0m] [0m                    buffer :+= vehicleToPersist[0m
[0m[[0mdebug[0m] [0m                    if (totalDemand > 0) {[0m
[0m[[0mdebug[0m] [0m                      val (use, keep) = buffer.splitAt(totalDemand.toInt)[0m
[0m[[0mdebug[0m] [0m                      buffer = keep[0m
[0m[[0mdebug[0m] [0m                      log.info(s"Demand is greater 0 sending ${use}")[0m
[0m[[0mdebug[0m] [0m                      use foreach onNext[0m
[0m[[0mdebug[0m] [0m                    }[0m
[0m[[0mdebug[0m] [0m                  }[0m
[0m[[0mdebug[0m] [0m                }[0m
[0m[[0mdebug[0m] [0m            }[0m
[0m[[0mdebug[0m] [0m          }[0m
[0m[[0mdebug[0m] [0m          case Failure(ex) => log.error(ex, ex.getMessage)[0m
[0m[[0mdebug[0m] [0m        }[0m
[0m[[0mdebug[0m] [0m      }[0m
[0m[[0mdebug[0m] [0m      case None => { log.debug("und noch mal weinen") }[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/scala/de/nierbeck/floating/data/stream/VehiclesActor.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/resources/application.conf[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/resources/application.conf is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/resources/application.conf is:[0m
[0m[[0mdebug[0m] [0m# Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m#[0m
[0m[[0mdebug[0m] [0m# Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m# you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m# You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m#[0m
[0m[[0mdebug[0m] [0m#     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m#[0m
[0m[[0mdebug[0m] [0m# Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m# distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m# See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m# limitations under the License.[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0makka {[0m
[0m[[0mdebug[0m] [0m  loglevel                         = "INFO"[0m
[0m[[0mdebug[0m] [0m  log-dead-letters                 = off[0m
[0m[[0mdebug[0m] [0m  log-dead-letters-during-shutdown = off[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcassandra {[0m
[0m[[0mdebug[0m] [0m  connect = "localhost:9042"[0m
[0m[[0mdebug[0m] [0m  connect = ${?CASSANDRA_CONNECT}[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mkafka {[0m
[0m[[0mdebug[0m] [0m  connect = "localhost:9092"[0m
[0m[[0mdebug[0m] [0m  connect = ${?KAFKA_CONNECT}[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/akka-ingest/src/main/resources/application.conf is:[0m
[0m[[0mdebug[0m] [0mNone[0m
