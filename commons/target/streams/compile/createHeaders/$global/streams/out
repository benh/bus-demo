[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/TiledVehicleFstDeserializer.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/TiledVehicleFstDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/TiledVehicleFstDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.serializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.util[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.{TiledVehicle, Vehicle}[0m
[0m[[0mdebug[0m] [0mimport org.apache.kafka.common.serialization.Deserializer[0m
[0m[[0mdebug[0m] [0mimport org.nustaq.serialization.FSTConfiguration[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mobject TiledVehicleFstDeserializer {[0m
[0m[[0mdebug[0m] [0m  val fst = FSTConfiguration.createDefaultConfiguration()[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mclass TiledVehicleFstDeserializer() extends Deserializer[TiledVehicle] {[0m
[0m[[0mdebug[0m] [0m  import TiledVehicleFstDeserializer._[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def deserialize(topic: String, data: Array[Byte]): TiledVehicle = {[0m
[0m[[0mdebug[0m] [0m    fst.asObject(data).asInstanceOf[TiledVehicle][0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def configure(configs: util.Map[String, _], isKey: Boolean): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def close(): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/TiledVehicleFstDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleDeserializer.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.serializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.io.{ ByteArrayInputStream, ObjectInputStream }[0m
[0m[[0mdebug[0m] [0mimport java.util[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.Vehicle[0m
[0m[[0mdebug[0m] [0mimport org.apache.kafka.common.serialization.Deserializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mclass VehicleDeserializer extends Deserializer[Vehicle] {[0m
[0m[[0mdebug[0m] [0m  override def configure(configs: util.Map[String, _], isKey: Boolean): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def close(): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def deserialize(topic: String, data: Array[Byte]): Vehicle = {[0m
[0m[[0mdebug[0m] [0m    val ois = new ObjectInputStream(new ByteArrayInputStream(data))[0m
[0m[[0mdebug[0m] [0m    ois.readObject().asInstanceOf[Vehicle][0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleFstDeserializer.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleFstDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleFstDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.serializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.io.ByteArrayInputStream[0m
[0m[[0mdebug[0m] [0mimport java.util[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport com.esotericsoftware.kryo.io.Input[0m
[0m[[0mdebug[0m] [0mimport com.twitter.chill.ScalaKryoInstantiator[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.Vehicle[0m
[0m[[0mdebug[0m] [0mimport org.apache.kafka.common.serialization.Deserializer[0m
[0m[[0mdebug[0m] [0mimport org.nustaq.serialization.FSTConfiguration[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mobject VehicleFstDeserializer {[0m
[0m[[0mdebug[0m] [0m  val fst = FSTConfiguration.createDefaultConfiguration()[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mclass VehicleFstDeserializer() extends Deserializer[Vehicle] {[0m
[0m[[0mdebug[0m] [0m  import VehicleFstDeserializer._[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def deserialize(topic: String, data: Array[Byte]): Vehicle = {[0m
[0m[[0mdebug[0m] [0m    fst.asObject(data).asInstanceOf[Vehicle][0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def configure(configs: util.Map[String, _], isKey: Boolean): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def close(): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleFstDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleKryoDeserializer.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleKryoDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleKryoDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.serializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.io.ByteArrayInputStream[0m
[0m[[0mdebug[0m] [0mimport java.util[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport com.esotericsoftware.kryo.io.Input[0m
[0m[[0mdebug[0m] [0mimport com.twitter.chill.ScalaKryoInstantiator[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.Vehicle[0m
[0m[[0mdebug[0m] [0mimport org.apache.kafka.common.serialization.Deserializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mobject VehicleKryoDeserializer {[0m
[0m[[0mdebug[0m] [0m  val kryo = new ScalaKryoInstantiator().newKryo()[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mclass VehicleKryoDeserializer() extends Deserializer[Vehicle] {[0m
[0m[[0mdebug[0m] [0m  import VehicleKryoDeserializer._[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  kryo.register(classOf[Vehicle], 1)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def deserialize(topic: String, data: Array[Byte]): Vehicle = {[0m
[0m[[0mdebug[0m] [0m    withResource(new Input(new ByteArrayInputStream(data)))(input => kryo.readObject(input, classOf[Vehicle]))[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def configure(configs: util.Map[String, _], isKey: Boolean): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def close(): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala-2.11/de/nierbeck/floating/data/serializer/VehicleKryoDeserializer.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/BoundingBox.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/BoundingBox.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/BoundingBox.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.domain[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class LatLon(lat: Float, lon: Float)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class BoundingBox(leftTop: LatLon, rightBotom: LatLon)[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/BoundingBox.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Route.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Route.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Route.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.domain[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class Route(longitude: Double, latitude: Double, display_name: String, id: String = "none")[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class Routes(items: List[Route])[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class RouteDetail(routeId: String, id: String, longitude: Double, latitude: Double, display_name: String)[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Route.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/RouteInfo.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/RouteInfo.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/RouteInfo.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.domain[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class RouteInfo(id: String, display_name: String)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class RouteInfos(items: List[RouteInfo])[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/RouteInfo.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Vehicle.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Vehicle.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Vehicle.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.domain[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.util.Date[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class Vehicle([0m
[0m[[0mdebug[0m] [0m  id: String,[0m
[0m[[0mdebug[0m] [0m  time: Option[Date] = None,[0m
[0m[[0mdebug[0m] [0m  latitude: Double,[0m
[0m[[0mdebug[0m] [0m  longitude: Double,[0m
[0m[[0mdebug[0m] [0m  heading: Integer,[0m
[0m[[0mdebug[0m] [0m  route_id: Option[String] = None,[0m
[0m[[0mdebug[0m] [0m  run_id: String = "none",[0m
[0m[[0mdebug[0m] [0m  seconds_since_report: Integer = 0[0m
[0m[[0mdebug[0m] [0m)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class TiledVehicle([0m
[0m[[0mdebug[0m] [0m  tileId: String,[0m
[0m[[0mdebug[0m] [0m  timeID: Date,[0m
[0m[[0mdebug[0m] [0m  id: String,[0m
[0m[[0mdebug[0m] [0m  time: Option[Date] = None,[0m
[0m[[0mdebug[0m] [0m  latitude: Double,[0m
[0m[[0mdebug[0m] [0m  longitude: Double,[0m
[0m[[0mdebug[0m] [0m  heading: Integer,[0m
[0m[[0mdebug[0m] [0m  route_id: Option[String] = None,[0m
[0m[[0mdebug[0m] [0m  run_id: String = "none",[0m
[0m[[0mdebug[0m] [0m  seconds_since_report: Integer = 0[0m
[0m[[0mdebug[0m] [0m)[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Vehicle.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/VehicleCluster.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/VehicleCluster.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/VehicleCluster.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.domain[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class VehicleCluster(id: Int, timeStamp: Long, latitude: Double, longitude: Double, amount: Int)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class TiledVehicleCluster(tileId:String, id: Int, timeStamp: Long, latitude: Double, longitude: Double, amount: Int)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class VehicleClusterDetails(id: Long, posId: Int, timeStamp: Long, latitude: Double, longitude: Double)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class TiledVehicleClusterDetails(tileId:String, id: Long, posId: Int, timeStamp: Long, latitude: Double, longitude: Double)[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/VehicleCluster.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Vehicles.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Vehicles.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Vehicles.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.domain[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase class Vehicles(items: List[Vehicle])[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/domain/Vehicles.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/package.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/package.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/package.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage object serializer {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  import scala.language.{ implicitConversions, postfixOps }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  type Closeable = { def close(): Unit }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  def withResource[A <: Closeable, B](a: A)(f: A => B): B =[0m
[0m[[0mdebug[0m] [0m    try f(a) finally a.close()[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/package.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/TiledVehicleFstSerializer.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/TiledVehicleFstSerializer.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/TiledVehicleFstSerializer.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.serializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.util[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.TiledVehicle[0m
[0m[[0mdebug[0m] [0mimport org.apache.kafka.common.serialization.Serializer[0m
[0m[[0mdebug[0m] [0mimport org.nustaq.serialization.FSTConfiguration[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mobject TiledVehicleFstSerializer {[0m
[0m[[0mdebug[0m] [0m  val fst = FSTConfiguration.createDefaultConfiguration()[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mclass TiledVehicleFstSerializer() extends Serializer[TiledVehicle] {[0m
[0m[[0mdebug[0m] [0m  import TiledVehicleFstSerializer._[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def serialize(topic: String, r: TiledVehicle): Array[Byte] = {[0m
[0m[[0mdebug[0m] [0m    fst.asByteArray(r)[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def configure(configs: util.Map[String, _], isKey: Boolean): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def close(): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/TiledVehicleFstSerializer.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleFstSerializer.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleFstSerializer.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleFstSerializer.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.serializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.util[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.Vehicle[0m
[0m[[0mdebug[0m] [0mimport org.apache.kafka.common.serialization.Serializer[0m
[0m[[0mdebug[0m] [0mimport org.nustaq.serialization.FSTConfiguration[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mobject VehicleFstSerializer {[0m
[0m[[0mdebug[0m] [0m  val fst = FSTConfiguration.createDefaultConfiguration()[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mclass VehicleFstSerializer() extends Serializer[Vehicle] {[0m
[0m[[0mdebug[0m] [0m  import VehicleFstSerializer._[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def serialize(topic: String, r: Vehicle): Array[Byte] = {[0m
[0m[[0mdebug[0m] [0m    fst.asByteArray(r)[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def configure(configs: util.Map[String, _], isKey: Boolean): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def close(): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleFstSerializer.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleKryoSerializer.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleKryoSerializer.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleKryoSerializer.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.serializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.io.ByteArrayOutputStream[0m
[0m[[0mdebug[0m] [0mimport java.util[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport com.esotericsoftware.kryo.io.Output[0m
[0m[[0mdebug[0m] [0mimport com.twitter.chill.ScalaKryoInstantiator[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.Vehicle[0m
[0m[[0mdebug[0m] [0mimport org.apache.kafka.common.serialization.Serializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mobject VehicleKryoSerializer {[0m
[0m[[0mdebug[0m] [0m  val kryo = new ScalaKryoInstantiator().newKryo()[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mclass VehicleKryoSerializer() extends Serializer[Vehicle] {[0m
[0m[[0mdebug[0m] [0m  import VehicleKryoSerializer._[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  kryo.register(classOf[Vehicle], 1)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def serialize(topic: String, r: Vehicle): Array[Byte] = {[0m
[0m[[0mdebug[0m] [0m    withResource(new Output(new ByteArrayOutputStream()))(output => {[0m
[0m[[0mdebug[0m] [0m      kryo.writeObject(output, r)[0m
[0m[[0mdebug[0m] [0m      output.getBuffer[0m
[0m[[0mdebug[0m] [0m    })[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def configure(configs: util.Map[String, _], isKey: Boolean): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def close(): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleKryoSerializer.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleSerializer.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleSerializer.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleSerializer.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.serializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.io.{ ByteArrayOutputStream, ObjectOutputStream }[0m
[0m[[0mdebug[0m] [0mimport java.util[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.Vehicle[0m
[0m[[0mdebug[0m] [0mimport org.apache.kafka.common.serialization.Serializer[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m/**[0m
[0m[[0mdebug[0m] [0m * Created by anierbeck on 09.05.16.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0mclass VehicleSerializer extends Serializer[Vehicle] {[0m
[0m[[0mdebug[0m] [0m  override def configure(configs: util.Map[String, _], isKey: Boolean): Unit = {}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def serialize(topic: String, data: Vehicle): Array[Byte] = {[0m
[0m[[0mdebug[0m] [0m    val baos = new ByteArrayOutputStream()[0m
[0m[[0mdebug[0m] [0m    val oos = new ObjectOutputStream(baos)[0m
[0m[[0mdebug[0m] [0m    oos.writeObject(data)[0m
[0m[[0mdebug[0m] [0m    oos.close[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    baos.toByteArray[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  override def close(): Unit = {}[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/serializer/VehicleSerializer.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/tiler/Direction.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/tiler/Direction.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/tiler/Direction.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.tiler[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0msealed trait Direction[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase object Up extends Direction[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase object Down extends Direction[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase object Right extends Direction[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mcase object Left extends Direction[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/tiler/Direction.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
[0m[[0mdebug[0m] [0mAbout to create/update header for /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/tiler/TileCalc.scala[0m
[0m[[0mdebug[0m] [0mFirst line of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/tiler/TileCalc.scala is:[0m
[0m[[0mdebug[0m] [0mText of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/tiler/TileCalc.scala is:[0m
[0m[[0mdebug[0m] [0m/*[0m
[0m[[0mdebug[0m] [0m * Copyright 2016 Achim Nierbeck[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Licensed under the Apache License, Version 2.0 (the "License");[0m
[0m[[0mdebug[0m] [0m * you may not use this file except in compliance with the License.[0m
[0m[[0mdebug[0m] [0m * You may obtain a copy of the License at[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m *     http://www.apache.org/licenses/LICENSE-2.0[0m
[0m[[0mdebug[0m] [0m *[0m
[0m[[0mdebug[0m] [0m * Unless required by applicable law or agreed to in writing, software[0m
[0m[[0mdebug[0m] [0m * distributed under the License is distributed on an "AS IS" BASIS,[0m
[0m[[0mdebug[0m] [0m * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[0m
[0m[[0mdebug[0m] [0m * See the License for the specific language governing permissions and[0m
[0m[[0mdebug[0m] [0m * limitations under the License.[0m
[0m[[0mdebug[0m] [0m */[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mpackage de.nierbeck.floating.data.tiler[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport java.util.Date[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport de.nierbeck.floating.data.domain.BoundingBox[0m
[0m[[0mdebug[0m] [0mimport org.slf4j.{Logger, LoggerFactory}[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mimport scala.annotation.tailrec[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mobject TileCalc {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  val logger = LoggerFactory.getLogger(this.getClass)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  val levelOfDetail = 15[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  private val MinLatitude = -85.05112878[0m
[0m[[0mdebug[0m] [0m  private val MaxLatitude = 85.05112878[0m
[0m[[0mdebug[0m] [0m  private val MinLongitude = -180[0m
[0m[[0mdebug[0m] [0m  private val MaxLongitude = 180[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  private def clip(n: Double, minValue: Double, maxValue: Double): Double = Math.min(Math.max(n, minValue), maxValue)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  private def latLongToTileCoordinate(latitude: Double, longitude: Double): (Int, Int) = {[0m
[0m[[0mdebug[0m] [0m    val clippedLatitude = clip(latitude, MinLatitude, MaxLatitude)[0m
[0m[[0mdebug[0m] [0m    val clippedLongitude = clip(longitude, MinLongitude, MaxLongitude)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    val latRad = clippedLatitude * Math.PI / 180[0m
[0m[[0mdebug[0m] [0m    val n = Math.pow(2, levelOfDetail)[0m
[0m[[0mdebug[0m] [0m    val xTile = n * ((clippedLongitude + 180) / 360)[0m
[0m[[0mdebug[0m] [0m    val yTile = n * (1 - (Math.log(Math.tan(latRad) + 1 / Math.cos(latRad)) / Math.PI)) / 2[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    (xTile.asInstanceOf[Int], yTile.asInstanceOf[Int])[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  private def tileCoordinateToQuadKey(tileX: Int, tileY: Int): String = {[0m
[0m[[0mdebug[0m] [0m    calcQuadKey(tileX, tileY, levelOfDetail, "")[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  @tailrec[0m
[0m[[0mdebug[0m] [0m  private def calcQuadKey(tileX:Int, tileY:Int, index: Int, partKey: String): String = {[0m
[0m[[0mdebug[0m] [0m    index match {[0m
[0m[[0mdebug[0m] [0m      case 0 => partKey[0m
[0m[[0mdebug[0m] [0m      case x:Int => {[0m
[0m[[0mdebug[0m] [0m        val mask = 1 << (index - 1)[0m
[0m[[0mdebug[0m] [0m        val tileXmask = tileX & mask[0m
[0m[[0mdebug[0m] [0m        val tileYmask = tileY & mask[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m        val digit = if (tileXmask != 0 && tileYmask != 0) {[0m
[0m[[0mdebug[0m] [0m          3[0m
[0m[[0mdebug[0m] [0m        } else if (tileXmask != 0) {[0m
[0m[[0mdebug[0m] [0m          1[0m
[0m[[0mdebug[0m] [0m        } else if (tileYmask != 0) {[0m
[0m[[0mdebug[0m] [0m          2[0m
[0m[[0mdebug[0m] [0m        } else {[0m
[0m[[0mdebug[0m] [0m          0[0m
[0m[[0mdebug[0m] [0m        }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m        calcQuadKey(tileX, tileY, index - 1, partKey + digit)[0m
[0m[[0mdebug[0m] [0m      }[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  private def keyCharTranslate(keyChar: Char, direction: Direction): Char = {[0m
[0m[[0mdebug[0m] [0m    keyChar match {[0m
[0m[[0mdebug[0m] [0m      case '0' =>[0m
[0m[[0mdebug[0m] [0m        if (horizontal(direction)) '1' else '2'[0m
[0m[[0mdebug[0m] [0m      case '1' =>[0m
[0m[[0mdebug[0m] [0m        if (horizontal(direction)) '0' else '3'[0m
[0m[[0mdebug[0m] [0m      case '2' =>[0m
[0m[[0mdebug[0m] [0m        if (horizontal(direction)) '3' else '0'[0m
[0m[[0mdebug[0m] [0m      case '3' =>[0m
[0m[[0mdebug[0m] [0m        if (horizontal(direction)) '2' else '1'[0m
[0m[[0mdebug[0m] [0m      case _ => throw new IllegalArgumentException("Unknown direction")[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  private def horizontal(direction: Direction) = direction == Left || direction == Right[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  def convertLatLongToQuadKey(latitude: Double, longitude: Double): String = {[0m
[0m[[0mdebug[0m] [0m    val tileXY = latLongToTileCoordinate(latitude, longitude)[0m
[0m[[0mdebug[0m] [0m    tileCoordinateToQuadKey(tileXY._1, tileXY._2)[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  //noinspection ScalaStyle[0m
[0m[[0mdebug[0m] [0m  def keyTranslate(quadKey: String, index: Int, direction: Direction): String = {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    val savedChar = quadKey.charAt(index)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    val prefix = quadKey.substring(0, index)[0m
[0m[[0mdebug[0m] [0m    var postfix = ""[0m
[0m[[0mdebug[0m] [0m    if (index < quadKey.length - 1)[0m
[0m[[0mdebug[0m] [0m      postfix = quadKey.substring(index + 1)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    var key = prefix + keyCharTranslate(quadKey.charAt(index), direction) + postfix[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    if (index > 0) {[0m
[0m[[0mdebug[0m] [0m      if (((savedChar == '0') && (direction == Left || direction == Up)) ||[0m
[0m[[0mdebug[0m] [0m        ((savedChar == '1') && (direction == Right || direction == Up)) ||[0m
[0m[[0mdebug[0m] [0m        ((savedChar == '2') && (direction == Left || direction == Down)) ||[0m
[0m[[0mdebug[0m] [0m        ((savedChar == '3') && (direction == Right || direction == Down))) {[0m
[0m[[0mdebug[0m] [0m        key = keyTranslate(key, index - 1, direction)[0m
[0m[[0mdebug[0m] [0m      }[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m    key[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  /**[0m
[0m[[0mdebug[0m] [0m    * calculates the contained tiles within one bounding box. To do so the algorithm crawls from the left top bbox coordinate[0m
[0m[[0mdebug[0m] [0m    * to the top right coordinate corresponding tile. This is repeated till the right bottom bbox coordinate is reached.[0m
[0m[[0mdebug[0m] [0m    *[0m
[0m[[0mdebug[0m] [0m    * @param bBox - enclosing bounding box to calculate the tiles for.[0m
[0m[[0mdebug[0m] [0m    * @return - a list of tileIDs, as String.[0m
[0m[[0mdebug[0m] [0m    */[0m
[0m[[0mdebug[0m] [0m  def convertBBoxToTileIDs(bBox: BoundingBox): Set[String] = {[0m
[0m[[0mdebug[0m] [0m    logger.debug("calculating tiles for bounding box")[0m
[0m[[0mdebug[0m] [0m    val tileIDLeftTop = TileCalc.convertLatLongToQuadKey(bBox.leftTop.lat, bBox.leftTop.lon)[0m
[0m[[0mdebug[0m] [0m    val tileIDRightBottom = TileCalc.convertLatLongToQuadKey(bBox.rightBotom.lat, bBox.rightBotom.lon)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m    if (tileIDLeftTop != tileIDRightBottom) {[0m
[0m[[0mdebug[0m] [0m      val tileIDRightTop = TileCalc.convertLatLongToQuadKey(bBox.leftTop.lat, bBox.rightBotom.lon)[0m
[0m[[0mdebug[0m] [0m      val tileIDLeftBottom = TileCalc.convertLatLongToQuadKey(bBox.rightBotom.lat, bBox.leftTop.lon)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m      if (tileIDLeftTop != tileIDRightTop && tileIDLeftBottom != tileIDRightBottom) {[0m
[0m[[0mdebug[0m] [0m        var cursor = tileIDLeftTop[0m
[0m[[0mdebug[0m] [0m        logger.debug(s"cursor: ${cursor}")[0m
[0m[[0mdebug[0m] [0m        var countRight = 0[0m
[0m[[0mdebug[0m] [0m        var tiles: Set[String] = Set()[0m
[0m[[0mdebug[0m] [0m        while (cursor != tileIDRightTop) {[0m
[0m[[0mdebug[0m] [0m          tiles = tiles + cursor[0m
[0m[[0mdebug[0m] [0m          cursor = TileCalc.keyTranslate(cursor, cursor.length - 1, Right)[0m
[0m[[0mdebug[0m] [0m          countRight = countRight + 1;[0m
[0m[[0mdebug[0m] [0m          logger.debug(s"new cursor: ${cursor}")[0m
[0m[[0mdebug[0m] [0m        }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m        cursor = TileCalc.keyTranslate(tileIDLeftTop, tileIDLeftTop.length - 1, Down)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m        logger.debug(s"new cursor: ${cursor}")[0m
[0m[[0mdebug[0m] [0m        while (cursor != tileIDRightBottom) {[0m
[0m[[0mdebug[0m] [0m          val startCursor = cursor[0m
[0m[[0mdebug[0m] [0m          var increment = 0[0m
[0m[[0mdebug[0m] [0m          while (increment < countRight) {[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m            tiles = tiles + cursor[0m
[0m[[0mdebug[0m] [0m            cursor = TileCalc.keyTranslate(cursor, cursor.length - 1, Right)[0m
[0m[[0mdebug[0m] [0m            increment = increment + 1[0m
[0m[[0mdebug[0m] [0m            logger.debug(s"new cursor: ${cursor}")[0m
[0m[[0mdebug[0m] [0m          }[0m
[0m[[0mdebug[0m] [0m          if (cursor != tileIDRightBottom) {[0m
[0m[[0mdebug[0m] [0m            cursor = TileCalc.keyTranslate(startCursor, startCursor.length - 1, Down)[0m
[0m[[0mdebug[0m] [0m          }[0m
[0m[[0mdebug[0m] [0m        }[0m
[0m[[0mdebug[0m] [0m        logger.debug(s"Done with tiles: ${tiles}")[0m
[0m[[0mdebug[0m] [0m        tiles[0m
[0m[[0mdebug[0m] [0m      } else {[0m
[0m[[0mdebug[0m] [0m        Set(tileIDLeftTop, tileIDRightBottom)[0m
[0m[[0mdebug[0m] [0m      }[0m
[0m[[0mdebug[0m] [0m    } else {[0m
[0m[[0mdebug[0m] [0m      Set(tileIDLeftTop)[0m
[0m[[0mdebug[0m] [0m    }[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0m  def transformTime(date: Date): Date = {[0m
[0m[[0mdebug[0m] [0m    val dt = new org.joda.time.DateTime(date)[0m
[0m[[0mdebug[0m] [0m    dt.withMinuteOfHour(0).withSecondOfMinute(0).withMillisOfSecond(0).toDate[0m
[0m[[0mdebug[0m] [0m  }[0m
[0m[[0mdebug[0m] [0m}[0m
[0m[[0mdebug[0m] [0mModified text of /Users/benh/workspace/BusFloatingData/commons/src/main/scala/de/nierbeck/floating/data/tiler/TileCalc.scala is:[0m
[0m[[0mdebug[0m] [0mNone[0m
